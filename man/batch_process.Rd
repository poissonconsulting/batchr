% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process.R
\name{batch_process}
\alias{batch_process}
\title{Batch File Processing}
\usage{
batch_process(FUN, path = ".", pattern = ".*", recursive = FALSE,
  parallel = FALSE, ...)
}
\arguments{
\item{FUN}{A function to process each of the files.}

\item{path}{A string of the path to the directory with the files.}

\item{pattern}{A string of a regular expression. Only non-hidden file names 
which match the regular expression will be batch processed.}

\item{recursive}{A flag specifying whether to recurse into sub directories.}

\item{parallel}{A flag specifying whether to process the files in 
parallel (not yet used).}

\item{...}{Additional arguments passed to FUN.}
}
\value{
A flag specifying whether all files were processed successfully.
}
\description{
Performs batch processing of files in a directory using the 
\code{\link{batch_config}()}, \code{\link{batch_run}()}
and \code{\link{batch_cleanup}()} functions.
}
\details{
As well as the directory and a regular expression to identify files the
user must provide the function that will be used to process each file.
Processing is started (and can be manually restarted) using \code{\link{batch_run}()}
which locks the configuration file with \code{\link[filelock]{lock}} 
to prevent concurrent calls. 
The files that have not yet been processed can be got 
using \code{\link{batch_remaining_files}()}.

The configuration details are saved in the '.batchr.rds file'
which can be read using \code{\link{batch_read_config}()}.
Configuration is only possible if the directory does not already contain
a configuration file. If \code{recursive = TRUE} then the subdirectories
must also not contain configuration files.
Existing configuration files can be listed using \code{\link{batch_config_files}()}.

The pattern must match at least one non-hidden file in the directory 
(or if \code{recursive = TRUE} in the directory or subdirectories).
Hidden files are excluded to prevent accidental modification of system files.

The FUN function's first argument should be a string of the path to a single file.
The function should return TRUE if processing was successful or FALSE
if processing was unsuccessful. 
If the function returns FALSE the failure is automatically logged as an INFO 
message in the '.batchr.log' file.

Processing is also considered to have failed if 
the function throws an error. 
In this case the error is caught, the failure is logged as an ERROR message 
and batch processing resumes at the next file.
If, however, the function returns an object other than 
a flag then a FATAL message is logged and processing 
ceases immediately with batchr throwing an error.

All failures are logged in the '.batchr.log' file with the level (WARN, ERROR, FATAL),
system time in UTC and file name using a \code{\link[log4r]{logger}} object.
This information parsed as a tibble 
with level, time and file columns using \code{\link{batch_read_log}()}.

If using \code{\link{batch_run}()}, the user can log custom messages 
by providing a \code{\link[log4r]{logger}} 
object which is passed to the FUN function as the \code{logger} argument.
}
\seealso{
\code{\link{batch_config}()}, \code{\link{batch_run}()}
and \code{\link{batch_cleanup}()}
}
