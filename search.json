[{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to batchr","title":"Contributing to batchr","text":"outlines propose change batchr.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to batchr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to batchr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://poissonconsulting.github.io/batchr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to batchr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. Begin commit merge messages - indicate user facing changes included NEWS.md. use fledge automatically generate NEWS.md file.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to batchr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://poissonconsulting.github.io/batchr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to batchr","text":"Please note batchr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://poissonconsulting.github.io/batchr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 batchr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://poissonconsulting.github.io/batchr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with batchr","title":"Getting help with batchr","text":"Thanks using batchr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://poissonconsulting.github.io/batchr/SUPPORT.html","id":"make-sure-its-new","dir":"","previous_headings":"","what":"Make sure its new","title":"Getting help with batchr","text":"opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://poissonconsulting.github.io/batchr/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with batchr","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://poissonconsulting.github.io/batchr/articles/batchr.html","id":"configure","dir":"Articles","previous_headings":"","what":"Configure","title":"Get Started with batchr","text":"Now let user configure directory process files names include digit file extension. contents hidden figuration file follows time value specifies system time (UTC) project configured. important files last modified configuration time considered unprocessed (file successfully processed modification time automatically set current system time).","code":"library(batchr) print(batch_config(fun, path = path, regexp = \"file\\\\d[.]txt$\")) #> [1] \"file2.txt\" \"file3.txt\" \"file4.txt\" batch_config_read(path) #> $time #> [1] \"2025-06-03 22:06:52 UTC\" #>  #> $regexp #> [1] \"file\\\\d[.]txt$\" #>  #> $recurse #> [1] FALSE #>  #> $fun #> function (file)  #> { #>     if (grepl(\"file3[.]txt$\", file)) { #>         return(FALSE) #>     } #>     if (grepl(\"file4[.]txt$\", file))  #>         stop(\"Uh, Houston, we've had a problem.\", call. = FALSE) #>     txt <- readLines(file) #>     txt <- gsub(\"contents\", \"modified contents\", txt) #>     writeLines(txt, file) #> } #>  #> $dots #> list()"},{"path":"https://poissonconsulting.github.io/batchr/articles/batchr.html","id":"run","dir":"Articles","previous_headings":"","what":"Run","title":"Get Started with batchr","text":"directory configured next task start processing files output can see ‘file2.csv’ processed successfully processing two files matched regexp failed. output also recorded hidden log file can read using batch_log_read(). summarised using contents ‘file2.csv’ now follows","code":"print(batch_run(path, ask = FALSE)) #> file2.txt file3.txt file4.txt  #>      TRUE     FALSE     FALSE batch_log_read(path) #>      type         time      file                           message #> 1 SUCCESS 00:00:00.000 file2.txt                              <NA> #> 2 FAILURE 00:00:00.006 file3.txt                              <NA> #> 3 FAILURE 00:00:00.000 file4.txt Uh, Houston, we've had a problem. batch_report(path) #> ✔ file2.txt [00:00:00.000] #> ✖ file3.txt [00:00:00.006] #> ✖ file4.txt [00:00:00.000] #> Success: 1 #> Failure: 2 #> Remaining: 0 #> readLines(file.path(path, \"file2.txt\")) #> [1] \"the modified contents of file2.txt\""},{"path":"https://poissonconsulting.github.io/batchr/articles/batchr.html","id":"reconfigure","dir":"Articles","previous_headings":"","what":"Reconfigure","title":"Get Started with batchr","text":"point let us update function regular expression files included successfully processed.","code":"batch_reconfig_fileset(path, regexp = \"[.]txt$\")  fun <- function(file) {   txt <- readLines(file)   txt <- gsub(\"contents\", \"modified contents\", txt)   writeLines(txt, file) }  batch_reconfig_fun(path, fun)"},{"path":"https://poissonconsulting.github.io/batchr/articles/batchr.html","id":"rerun","dir":"Articles","previous_headings":"","what":"Rerun","title":"Get Started with batchr","text":"Now call batch_run() newly included ‘file.txt’ successfully processed. order reattempt processing ‘file3.txt’ ‘file4.txt’ need set failed = TRUE.","code":"batch_run(path, ask = FALSE) batch_report(path) #> ✔ file.txt [00:00:00.000] #> ✔ file2.txt [00:00:00.000] #> ✖ file3.txt [00:00:00.006] #> ✖ file4.txt [00:00:00.000] #> Success: 2 #> Failure: 2 #> Remaining: 0 #> batch_run(path, failed = TRUE, ask = FALSE) batch_report(path) #> ✔ file.txt [00:00:00.000] #> ✔ file2.txt [00:00:00.000] #> ✔ file3.txt [00:00:00.000] #> ✔ file4.txt [00:00:00.002] #> Success: 4 #> Failure: 0 #> Remaining: 0 #>"},{"path":"https://poissonconsulting.github.io/batchr/articles/batchr.html","id":"clean-up","dir":"Articles","previous_headings":"","what":"Clean Up","title":"Get Started with batchr","text":"files successfully processed remaining task delete hidden configuration log files.","code":"list.files(path, all.files = TRUE) #> [1] \".\"           \"..\"          \".batchr.log\" \".batchr.rds\" \"file.txt\"    #> [6] \"file2.txt\"   \"file3.txt\"   \"file4.txt\" print(batch_cleanup(path)) #>    .  #> TRUE list.files(path, all.files = TRUE) #> [1] \".\"         \"..\"        \"file.txt\"  \"file2.txt\" \"file3.txt\" \"file4.txt\""},{"path":"https://poissonconsulting.github.io/batchr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Thorley. Author, maintainer. Audrey Beliveau. Contributor. Ayla Pearson. Contributor. . Copyright holder, funder.","code":""},{"path":"https://poissonconsulting.github.io/batchr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorley J (2025). batchr: Batch Process Files. R package version 0.0.2.9000, https://poissonconsulting.github.io/batchr/.","code":"@Manual{,   title = {batchr: Batch Process Files},   author = {Joe Thorley},   year = {2025},   note = {R package version 0.0.2.9000},   url = {https://poissonconsulting.github.io/batchr/}, }"},{"path":"https://poissonconsulting.github.io/batchr/index.html","id":"batchr-","dir":"","previous_headings":"","what":"Batch Process Files","title":"Batch Process Files","text":"batchr R package batch process files using R function. key design principle files last modified directory configured processed. hidden file stores configuration time function etc successfully processed files automatically touched update modification date. result batch processing can stopped restarted files created (modified deleted) processing ignored. allow user control reprocessing problematic files, processing attempts (SUCCESS FAILURE) recorded hidden log file.","code":""},{"path":"https://poissonconsulting.github.io/batchr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Batch Process Files","text":"can install released version batchr CRAN : development version GitHub :","code":"install.packages(\"batchr\") # install.packages(\"remotes\") remotes::install_github(\"poissonconsulting/batchr\")"},{"path":"https://poissonconsulting.github.io/batchr/index.html","id":"demonstration","dir":"","previous_headings":"","what":"Demonstration","title":"Batch Process Files","text":"Consider directory two .csv files First define function process . simply call batch_process() apply function files. files updated follows. realistic demonstration finer control batch processing see Batchr Demonstration vignette.","code":"path <- file.path(tempdir(), \"example\") unlink(path, force = TRUE) dir.create(path)  write.csv(data.frame(x = 1), file.path(path, \"file1.csv\"), row.names = FALSE) write.csv(data.frame(x = 3), file.path(path, \"file2.csv\"), row.names = FALSE) fun <- function(file) {   data <- read.csv(file)   data$x <- data$x * 2   write.csv(data, file, row.names = FALSE)   TRUE } library(batchr) batch_process(fun, path, ask = FALSE) #>  #> Attaching package: 'purrr' #> The following object is masked from 'package:testthat': #>  #>     is_null #> ✔ file1.csv [00:00:00.001] #> ✔ file2.csv [00:00:00.008] #> Success: 2 #> Failure: 0 #> Remaining: 0 #> read.csv(file.path(path, \"file1.csv\")) #>   x #> 1 2 read.csv(file.path(path, \"file2.csv\")) #>   x #> 1 6"},{"path":"https://poissonconsulting.github.io/batchr/index.html","id":"parallel-chains","dir":"","previous_headings":"Demonstration","what":"Parallel Chains","title":"Batch Process Files","text":"process files parallel simply set","code":"library(future) plan(multisession)"},{"path":"https://poissonconsulting.github.io/batchr/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Batch Process Files","text":"Please report issues. Pull requests always welcome.","code":""},{"path":"https://poissonconsulting.github.io/batchr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Batch Process Files","text":"Please note batchr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup Batch Processing — batch_cleanup","title":"Cleanup Batch Processing — batch_cleanup","text":"Deletes configuration file created batch_config() log file created batch_run().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup Batch Processing — batch_cleanup","text":"","code":"batch_cleanup(   path,   force = FALSE,   remaining = FALSE,   failed = NA,   recursive = FALSE,   silent = FALSE )"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup Batch Processing — batch_cleanup","text":"path string path directory files processing. force flag specifying whether delete configuration log files even files remaining processed. remaining flag specifying whether delete files remaining processed (applied force = TRUE). Files processed never deleted. failed logical scalar specifying treat files previously failed process. FALSE (default) failed files excluded, NA included TRUE included. recursive flag specifying whether recurse subdirectories cleaning . unrelated recurse option batch_config() expected used user neglected clean multiple nested directories. silent flag specifying whether suppress warnings (messages).","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup Batch Processing — batch_cleanup","text":"named logical vector indicating directories successfully cleaned .","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_cleanup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cleanup Batch Processing — batch_cleanup","text":"batch_completed() function can used test batch processing complete.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_cleanup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cleanup Batch Processing — batch_cleanup","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_run(path, ask = FALSE) batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_completed.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch Completed? — batch_completed","title":"Batch Completed? — batch_completed","text":"Tests remaining files process listed batch_files_remaining().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_completed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch Completed? — batch_completed","text":"","code":"batch_completed(path, failed = FALSE)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_completed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch Completed? — batch_completed","text":"path string path directory files processing. failed logical scalar specifying treat files previously failed process. FALSE (default) failed files excluded, NA included TRUE included.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_completed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch Completed? — batch_completed","text":"flag specifying whether batch processing complete.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_completed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch Completed? — batch_completed","text":"default, files previously failed process excluded.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_completed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch Completed? — batch_completed","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_completed(path) #> [1] FALSE batch_run(path, ask = FALSE) batch_completed(path) #> [1] TRUE batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Batch Processing — batch_config","title":"Configure Batch Processing — batch_config","text":"Configures directory batch file processing batch_run().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Batch Processing — batch_config","text":"","code":"batch_config(fun, path, regexp = \".*\", recurse = FALSE, ...)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Batch Processing — batch_config","text":"fun function process files. fun's first argument string path single file. processing unsuccessful fun return FALSE throw error (error messages caught automatically logged). fun deletes modifies file longer considered processing. path string path directory files processing. regexp string regular expression. non-hidden file names match regular expression batch processed. recurse flag specifying whether recurse path's subdirectories. ... Additional arguments passed fun.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Batch Processing — batch_config","text":"invisible character vector paths files processed batch_run() called.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configure Batch Processing — batch_config","text":"batch_config() creates hidden configuration file path named '.batchr.rds'. contents file can read using batch_config_read() updated using batch_reconfig_fun(). Configuration possible directory already contain configuration file. recurse = TRUE subdirectories must also contain configuration files. regexp must match least one non-hidden file directory recurse = TRUE directory subdirectories. Hidden files excluded prevent accidental modification system files.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Batch Processing — batch_config","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_run(path, ask = FALSE) batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Configuration File — batch_config_read","title":"Read Configuration File — batch_config_read","text":"Reads values configuration file created batch_config().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Configuration File — batch_config_read","text":"","code":"batch_config_read(path)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Configuration File — batch_config_read","text":"path string path directory files processing.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Configuration File — batch_config_read","text":"named list configuration values.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_config_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Configuration File — batch_config_read","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_config_read(path) #> $time #> [1] \"2025-06-03 22:06:46 UTC\" #>  #> $regexp #> [1] \"[.]csv$\" #>  #> $recurse #> [1] FALSE #>  #> $fun #> function (x)  #> TRUE #> <environment: 0x55a0986461b0> #>  #> $dots #> list() #>  batch_cleanup(path, force = TRUE, remaining = TRUE) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_file_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch File Status — batch_file_status","title":"Batch File Status — batch_file_status","text":"Gets current status (SUCCESS, FAILURE, REMAING) eligible file path.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_file_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch File Status — batch_file_status","text":"","code":"batch_file_status(path)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_file_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch File Status — batch_file_status","text":"path string path directory files processing.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_file_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch File Status — batch_file_status","text":"tibble four columns: type character vector indicating SUCCESS,  FAILURE REMAING time hms vector file processing time file character vector file name error character vector error message (NA error)","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_file_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch File Status — batch_file_status","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_file_status(path) #> # A tibble: 1 × 4 #>   type    time   file      message #>   <chr>   <time> <chr>     <chr>   #> 1 REMAING    NA  file1.csv NA      batch_run(path, ask = FALSE) batch_file_status(path) #> # A tibble: 1 × 4 #>   type    time   file      message #>   <chr>   <time> <chr>     <chr>   #> 1 SUCCESS 00'00\" file1.csv NA      batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_files_remaining.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch Files — batch_files_remaining","title":"Batch Files — batch_files_remaining","text":"Gets names files remaining processed batch_run().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_files_remaining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch Files — batch_files_remaining","text":"","code":"batch_files_remaining(path, failed = FALSE)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_files_remaining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch Files — batch_files_remaining","text":"path string path directory files processing. failed logical scalar specifying treat files previously failed process. FALSE (default) failed files excluded, NA included TRUE included.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_files_remaining.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch Files — batch_files_remaining","text":"character vector names remaining files.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_files_remaining.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Batch Files — batch_files_remaining","text":"batch_completed() can used test files remaining.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_files_remaining.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch Files — batch_files_remaining","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_files_remaining(path) #> [1] \"file1.csv\" batch_run(path, ask = FALSE) batch_files_remaining(path) #> character(0) batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_is_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Clean — batch_is_clean","title":"Is Clean — batch_is_clean","text":"Tests whether directory contains configuration file created batch_config().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_is_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Clean — batch_is_clean","text":"","code":"batch_is_clean(path, recurse = FALSE)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_is_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Clean — batch_is_clean","text":"path string path directory files processing. recurse flag specifying whether recurse path's subdirectories.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_is_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Clean — batch_is_clean","text":"flag specifying whether directory clean.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_is_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is Clean — batch_is_clean","text":"","code":"path <- tempdir() batch_is_clean(path) #> [1] TRUE write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_is_clean(path) #> [1] FALSE batch_cleanup(path, force = TRUE, remaining = TRUE) batch_is_clean(path) #> [1] TRUE unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_log_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Log File — batch_log_read","title":"Read Log File — batch_log_read","text":"Reads values log file created batch_run().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_log_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Log File — batch_log_read","text":"","code":"batch_log_read(path)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_log_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Log File — batch_log_read","text":"path string path directory files processing.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_log_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Log File — batch_log_read","text":"tibble four columns: type character vector indicating SUCCESS FAILURE time hms vector file processing time file character vector file name error character vector error message (NA error)","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_log_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Log File — batch_log_read","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_log_read(path) #> # A tibble: 0 × 4 #> # ℹ 4 variables: type <chr>, time <time>, file <chr>, message <chr> batch_run(path, ask = FALSE) batch_log_read(path) #> # A tibble: 1 × 4 #>   type    time   file      message #>   <chr>   <time> <chr>     <chr>   #> 1 SUCCESS 00'00\" file1.csv NA      batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_process.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch File Processing — batch_process","title":"Batch File Processing — batch_process","text":"Performs batch processing files directory using batch_config(), batch_run() batch_cleanup() functions. control user call three functions instead.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch File Processing — batch_process","text":"","code":"batch_process(   fun,   path,   regexp = \".*\",   recurse = FALSE,   progress = FALSE,   force = TRUE,   report = TRUE,   seeds = NULL,   options = furrr::furrr_options(),   ask = getOption(\"batchr.ask\", TRUE),   ... )"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch File Processing — batch_process","text":"fun function process files. fun's first argument string path single file. processing unsuccessful fun return FALSE throw error (error messages caught automatically logged). fun deletes modifies file longer considered processing. path string path directory files processing. regexp string regular expression. non-hidden file names match regular expression batch processed. recurse flag specifying whether recurse path's subdirectories. progress flag specifying whether print progress bar. force flag specifying whether delete configuration log files even files remaining processed. report flag specifying whether outputs report status individual files console. seeds named list L'Ecuyer-CMRG seed use file. NULL seeds batch_seeds(files). options future specific options use workers. seed must FALSE. ask flag specifying whether ask starting process files. ... Additional arguments passed fun.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch File Processing — batch_process","text":"invisible flag indicating whether files successfully processed.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch File Processing — batch_process","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_process(function(x) TRUE, path, regexp = \"[.]csv$\", ask = FALSE) #> ✔ file1.csv [00:00:00.000] #> Success: 1 #> Failure: 0 #> Remaining: 0 #>  unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fileset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","title":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","text":"Updates regular expression /recurse argument  provided directory configured (using batch_config()).","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fileset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","text":"","code":"batch_reconfig_fileset(path, regexp = NULL, recurse = NULL)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fileset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","text":"path string path directory files processing. regexp string regular expression. non-hidden file names match regular expression batch processed. recurse flag specifying whether recurse path's subdirectories.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fileset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","text":"invisible character vector paths files remaining processed.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fileset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","text":"batch_reconfig_fileset() useful including excluding particular files. noted batch_reconfig_fun() alter configuration time. order process previously failed files batch_run() called failed = NA failed = TRUE.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fileset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconfigures Batch Processing File Set — batch_reconfig_fileset","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_config_read(path) #> $time #> [1] \"2025-06-03 22:06:49 UTC\" #>  #> $regexp #> [1] \"[.]csv$\" #>  #> $recurse #> [1] FALSE #>  #> $fun #> function (x)  #> TRUE #> <environment: 0x55a097ac95a8> #>  #> $dots #> list() #>  batch_reconfig_fileset(path, regexp = \"file\\\\d+[.]csv$\") batch_config_read(path) #> $time #> [1] \"2025-06-03 22:06:49 UTC\" #>  #> $regexp #> [1] \"file\\\\d+[.]csv$\" #>  #> $recurse #> [1] FALSE #>  #> $fun #> function (x)  #> TRUE #> <environment: 0x55a0981f9f38> #>  #> $dots #> list() #>  batch_cleanup(path, force = TRUE, remaining = TRUE) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconfigures Batch Processing Function — batch_reconfig_fun","title":"Reconfigures Batch Processing Function — batch_reconfig_fun","text":"Updates function function arguments provided directory configured (using batch_config()).","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconfigures Batch Processing Function — batch_reconfig_fun","text":"","code":"batch_reconfig_fun(path, fun, ...)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconfigures Batch Processing Function — batch_reconfig_fun","text":"path string path directory files processing. fun function process files. fun's first argument string path single file. processing unsuccessful fun return FALSE throw error (error messages caught automatically logged). fun deletes modifies file longer considered processing. ... Additional arguments passed fun.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconfigures Batch Processing Function — batch_reconfig_fun","text":"invisible character vector paths files remaining processed.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_reconfig_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reconfigures Batch Processing Function — batch_reconfig_fun","text":"batch_reconfig_fun() useful new version function required successfully process files. noted batch_reconfig_fun() alter configuration time. order process previously failed files batch_run() called failed = NA failed = TRUE.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch Report — batch_report","title":"Batch Report — batch_report","text":"Outputs report status individual files console.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch Report — batch_report","text":"","code":"batch_report(path)"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Batch Report — batch_report","text":"path string path directory files processing.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Batch Report — batch_report","text":"invisible NULL. function called side-effect outputting report status individual files console.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Batch Report — batch_report","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\", ) batch_report(path) #> ! file1.csv #> Success: 0 #> Failure: 0 #> Remaining: 1 #>  batch_run(path, ask = FALSE) batch_report(path) #> ✔ file1.csv [00:00:00.000] #> Success: 1 #> Failure: 0 #> Remaining: 0 #>  batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs Batch Processing — batch_run","title":"Runs Batch Processing — batch_run","text":"Starts (restarts previously stopped) processing remaining files specified batch_config().","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs Batch Processing — batch_run","text":"","code":"batch_run(   path,   failed = FALSE,   progress = FALSE,   files = NULL,   seeds = NULL,   options = furrr::furrr_options(),   ask = getOption(\"batchr.ask\", TRUE) )"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs Batch Processing — batch_run","text":"path string path directory files processing. failed logical scalar specifying treat files previously failed process. FALSE (default) failed files excluded, NA included TRUE included. progress flag specifying whether print progress bar. files character vector remaining files process. NULL files batch_files_remaining(path, failed). seeds named list L'Ecuyer-CMRG seed use file. NULL seeds batch_seeds(files). options future specific options use workers. seed must FALSE. ask flag specifying whether ask starting process files.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs Batch Processing — batch_run","text":"invisible named logical vector indicating file whether successfully processed.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs Batch Processing — batch_run","text":"batch_run() logs file processing attempts together type (SUCCESS FAILURE), system time UTC, file name error messages. hidden log file can read using batch_log_read(). batch_files_remaining() provides vector files remaining processed. processing complete hidden configuration file hidden log file can deleted using batch_cleanup(). remaining file removed modified separate process, batch_run() throws error.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs Batch Processing — batch_run","text":"","code":"path <- tempdir() write.csv(mtcars, file.path(path, \"file1.csv\")) batch_config(function(x) TRUE, path, regexp = \"[.]csv$\") batch_run(path, ask = FALSE) batch_cleanup(path) unlink(file.path(path, \"file1.csv\"))"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_seeds.html","id":null,"dir":"Reference","previous_headings":"","what":"L'Ecuyer-CMRG Seeds — batch_seeds","title":"L'Ecuyer-CMRG Seeds — batch_seeds","text":"Generates named list L'Ecuyer-CMRG seeds.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_seeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"L'Ecuyer-CMRG Seeds — batch_seeds","text":"","code":"batch_seeds(files = batch_files_remaining())"},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_seeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"L'Ecuyer-CMRG Seeds — batch_seeds","text":"files character vector names files.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_seeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"L'Ecuyer-CMRG Seeds — batch_seeds","text":"named list L'Ecuyer-CMRG seed file name.","code":""},{"path":"https://poissonconsulting.github.io/batchr/reference/batch_seeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"L'Ecuyer-CMRG Seeds — batch_seeds","text":"","code":"batch_seeds(c(\"a\", \"b\")) #> $a #> [1]       10407     1258005 -1665023502  -363498263  1592400976  -155253397 #> [7]  -600925981 #>  #> $b #> [1]       10407 -1956927634 -1295442826  2121865102  -142604915  -317767264 #> [7]  -360586237 #>"},{"path":"https://poissonconsulting.github.io/batchr/reference/batchr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"batchr: Batch Process Files — batchr-package","title":"batchr: Batch Process Files — batchr-package","text":"Processes multiple files user-supplied function. key design principle files last modified directory configured processed. hidden file stores configuration time function etc successfully processed files automatically touched update modification date. result batch processing can stopped restarted files created (modified deleted) processing ignored.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/batchr/reference/batchr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"batchr: Batch Process Files — batchr-package","text":"Maintainer: Joe Thorley joe@poissonconsulting.ca (ORCID) contributors: Audrey Beliveau audrey.beliveau@uwaterloo.ca [contributor] Ayla Pearson ayla@poissonconsulting.ca (ORCID) [contributor] Poisson Consulting [copyright holder, funder]","code":""},{"path":"https://poissonconsulting.github.io/batchr/news/index.html","id":"batchr-0029000","dir":"Changelog","previous_headings":"","what":"batchr 0.0.2.9000","title":"batchr 0.0.2.9000","text":"previous version.","code":""},{"path":"https://poissonconsulting.github.io/batchr/news/index.html","id":"batchr-002","dir":"Changelog","previous_headings":"","what":"batchr 0.0.2","title":"batchr 0.0.2","text":"CRAN release: 2021-10-03 previous version.","code":""},{"path":"https://poissonconsulting.github.io/batchr/news/index.html","id":"batchr-001","dir":"Changelog","previous_headings":"","what":"batchr 0.0.1","title":"batchr 0.0.1","text":"CRAN release: 2021-02-16 Added NEWS.md file track changes package.","code":""}]
